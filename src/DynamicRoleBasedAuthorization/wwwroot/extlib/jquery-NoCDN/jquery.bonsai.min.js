/**
 * Minified by jsDelivr using UglifyJS v3.3.20.
 * Original file: /npm/jquery-bonsai@2.1.3/jquery.bonsai.js
 * 
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
!function (e) { "function" == typeof define && define.amd ? define(["jquery", "jquery-qubit"], e) : "object" == typeof exports ? e(require("jquery"), require("jquery-qubit")) : e(jQuery, jQuery.fn.qubit) }(function (l, e) { l.fn.bonsai = function (t) { var n = arguments; return this.each(function () { var e = l(this).data("bonsai"); if (e || (e = new i(this, t), l(this).data("bonsai", e)), "string" == typeof t) return e[t].apply(e, [].slice.call(n, 1)) }) }, l.bonsai = {}, l.bonsai.defaults = { expandAll: !1, expand: null, collapse: null, addExpandAll: !1, addSelectAll: !1, selectAllExclude: null, idAttribute: "id", createInputs: !1, checkboxes: !1, handleDuplicateCheckboxes: !1, createRadioButtons: !1 }; var i = function (e, t) { var n = this; t = t || {}, this.options = l.extend({}, l.bonsai.defaults, t), this.el = l(e).addClass("bonsai").data("bonsai", this), this.options.scope || (this.options.scope = this.el), this.update(), this.isRootNode() && (this.options.createCheckboxes && (this.createInputs = "checkbox"), this.options.handleDuplicateCheckboxes && this.handleDuplicateCheckboxes(), this.options.checkboxes && this.el.qubit(this.options), this.options.addExpandAll && this.addExpandAllLink(), this.options.addSelectAll && this.addSelectAllLink(), this.el.on("click", ".thumb", function (e) { n.toggle(l(e.currentTarget).closest("li")) })), this.options.expandAll && this.expandAll() }; i.prototype = { isRootNode: function () { return this.options.scope == this.el }, listItem: function (e) { return "object" == typeof e ? l(e) : this.el.find("[" + this.options.idAttribute + '="' + e + '"]') }, toggle: function (e) { return l(e).hasClass("expanded") ? this.collapse(e) : this.expand(e) }, expand: function (e) { return this.setExpanded(e, !0) }, collapse: function (e) { return this.setExpanded(e, !1) }, setExpanded: function (e, t) { var n = this.listItem(e); if (!(1 < n.length)) { if (t) { if (!n.data("subList")) return; n = l(n).addClass("expanded").removeClass("collapsed"), l(n.data("subList")).css("height", "auto") } else n = l(n).addClass("collapsed").removeClass("expanded"), l(n.data("subList")).height(0); return n } var i = this; n.each(function () { i.setExpanded(this, t) }) }, expandAll: function () { this.expand(this.el.find("li")) }, collapseAll: function () { this.collapse(this.el.find("li")) }, expandTo: function (e) { var t = this, n = this.listItem(e); return n.parents("li").each(function () { t.expand(l(this)) }), n }, update: function () { var i = this; this.el.children().each(function () { var t = l(this); if (i.options.createInputs && i.insertInput(t), 0 == t.children().filter(".thumb").length) { var e = l('<div class="thumb"></div>'); t.prepend(e) } var n = t.children().filter("ol, ul"); t.toggleClass("has-children", 0 < n.find("li").length), n.each(function () { if (0 != l("li", this).length) { t.data("subList", this), t.hasClass("expanded") ? i.expand(t) : i.collapse(t); var e = !!l(this).data("bonsai"); l(this).bonsai(e ? "update" : i.options) } }) }), this.expand = this.options.expand || this.expand, this.collapse = this.options.collapse || this.collapse }, serialize: function () { var a = this.options.idAttribute; return this.el.find("li").toArray().reduce(function (e, t) { var n = l(t), i = n.attr(a); i && ((n.hasClass("expanded") ? "expanded" : n.hasClass("collapsed") ? "collapsed" : null) && e[n.hasClass("expanded") ? "expanded" : "collapsed"].push(i)); return e }, { expanded: [], collapsed: [], version: 2 }) }, restore: function (t) { var n = this; 1 < t.version ? (t.expanded.map(this.expand.bind(this)), t.collapsed.map(this.collapse.bind(this))) : Object.keys(t).forEach(function (e) { n.setExpanded(e, "expanded" === t[e]) }) }, insertInput: function (e) { var t = this.options.createInputs; if (!e.find("> input[type=" + t + "]").length) { var n = this.inputIdFor(e), i = l('<input type="' + t + '" name="' + this.inputNameFor(e) + '" id="' + n + '" /> '), a = e.children(), s = e.contents().filter(function () { return 3 == this.nodeType }).first(); i.val(e.data("value")), i.prop("checked", e.data("checked")), a.detach(), e.append(i).append(l('<label for="' + n + '">').append(0 < s.length ? s : a.first())).append(0 < s.length ? a : a.slice(1)) } }, checkboxPrefix: "bonsai-checkbox-", inputIdFor: function (e) { for (var t = l(e).data("id"); !t || 0 < l("#" + t).length;)t = this.checkboxPrefix + i.uniqueId++; return t }, inputNameFor: function (e) { return e.data("name") || e.parents().filter("[data-name]").data("name") }, handleDuplicateCheckboxes: function () { var i = this; i.el.on("change", "input[type=checkbox]", function (e) { var t = l(e.target); if (t.val()) { var n = 'input[type=checkbox][value="' + t.val() + '"]' + (t.attr("name") ? '[name="' + t.attr("name") + '"]' : "") + (t.prop("checked") ? ":not(:checked)" : ":checked"); i.el.find(n).prop({ checked: t.prop("checked"), indeterminate: t.prop("indeterminate") }).trigger("change") } }) }, addExpandAllLink: function () { var e = this; l('<div class="expand-all">').append(l('<a class="all">Expand all</a>').on("click", function () { e.expandAll() })).append('<i class="separator"></i>').append(l('<a class="none">Collapse all</a>').on("click", function () { e.collapseAll() })).insertBefore(this.el) }, addSelectAllLink: function () { var e = this.options.scope, t = this; function n() { return e.find("li").filter(t.options.selectAllExclude || function () { return "none" != l(this).css("display") }).find("> input[type=checkbox]") } l('<div class="check-all">').append(l('<a class="all">Select all</a>').css("cursor", "pointer").on("click", function () { n().prop({ checked: !0, indeterminate: !1 }) })).append('<i class="separator"></i>').append(l('<a class="none">Select none</a>').css("cursor", "pointer").on("click", function () { n().prop({ checked: !1, indeterminate: !1 }) })).insertAfter(this.el) }, setCheckedValues: function (e) { var n = this.options.scope.find("input[type=checkbox]"); l.each(e, function (e, t) { n.filter('[value="' + t + '"]').prop("checked", !0).trigger("change") }) } }, l.extend(i, { uniqueId: 0 }) });
//# sourceMappingURL=/sm/64904e207af5ead15a6154f8a4a9c2c88cfc27d22aa512932380b8871114c7c9.map